{"version":3,"sources":["unnamed.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","characters","term","currentPage","charactersPerPage","searchHandler","bind","handleClick","axios","get","then","res","data","setState","event","this","Number","target","id","value","result","filter","x","name","toLowerCase","includes","searchingFor","indexOfLastCharacters","indexOfFirstCharacters","currentPageCharacters","slice","pageNumbers","i","Math","ceil","length","push","renderPagerNumbers","map","number","Button","onClick","className","Header","src","logo","Container","Input","icon","placeholder","type","onChange","Card","Image","img","wrapped","ui","Content","Meta","Icon","birthday","nickname","Description","occupation","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,qC,qUC2G1BC,E,YA1Ff,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACCC,MAAQ,CACbC,WAAY,GACVC,KAAM,GACNC,YAAa,EACbC,kBAAmB,GAGrB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAVL,E,iFAcG,IAAD,OAClBE,IAAMC,IAAN,6CACGC,MAAK,SAAAC,GACJ,IAAMV,EAAaU,EAAIC,KACvB,EAAKC,SAAS,CAAEZ,oB,kCAMVa,GACVC,KAAKF,SAAS,CAACV,YAAaa,OAAOF,EAAMG,OAAOC,Q,oCAGpCJ,GACZC,KAAKF,SAAS,CACZX,KAAMY,EAAMG,OAAOE,MACnBhB,YAAa,M,+BAYf,IARO,IAAD,SACqDY,KAAKf,MAAzDE,EADD,EACCA,KAAMD,EADP,EACOA,WAAYE,EADnB,EACmBA,YAAaC,EADhC,EACgCA,kBAClCgB,EAASnB,EAAWoB,OA/C1B,SAAsBnB,GACpB,OAAO,SAASoB,GACd,OAAOA,EAAEC,KAAKC,cAAcC,SAASvB,EAAKsB,iBAAmBtB,GA6ChCwB,CAAaX,KAAKf,MAAME,OACnDyB,EAAwBxB,EAAcC,EACtCwB,EAAyBD,EAAwBvB,EACjDyB,EAAwBT,EAAOU,MAAMF,EAAwBD,GAE7DI,EAAc,GACTC,EAAI,EAAGA,GAAKC,KAAKC,KAAKd,EAAOe,OAAS/B,GAAoB4B,IACjED,EAAYK,KAAKJ,GAGnB,IAAIK,EAAqBN,EAAYO,KAAI,SAAAC,GACvC,OACE,kBAACC,EAAA,EAAD,CAAQtB,GAAIqB,EAAQE,QAAS,EAAKlC,aAAcgC,MAMpD,OACE,yBAAKG,UAAU,aACb,kBAACC,EAAA,EAAD,CAAQD,UAAU,cAAa,yBAAKE,IAAKC,IAAM3B,GAAG,UAClD,kBAAC4B,EAAA,EAAD,KACA,8BACE,kBAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,YAAY,YAAYC,KAAK,OAAOC,SAAUpC,KAAKV,cAAec,MAAOjB,KAE/F2B,EAAsBS,KAAI,SAAArC,GACzB,OAEK,kBAACmD,EAAA,EAAD,CAAMlC,GAAG,QACF,kBAACmC,EAAA,EAAD,CAAOT,IAAK3C,EAAWqD,IAAKC,SAAO,EAACC,IAAI,IACxC,kBAACJ,EAAA,EAAKK,QAAN,KACE,kBAACL,EAAA,EAAKT,OAAN,KAAc1C,EAAWsB,MACzB,kBAAC6B,EAAA,EAAKM,KAAN,KACE,8BAAM,kBAACC,EAAA,EAAD,CAAMpC,KAAK,aAAjB,IAA+BtB,EAAW2D,SAA1C,MAAsD,kBAACD,EAAA,EAAD,CAAMpC,KAAK,SAAStB,EAAW4D,WAEvF,kBAACT,EAAA,EAAKU,YAAN,KACG7D,EAAW8D,kBAStC,yBAAKrB,UAAU,SAASL,GACxB,yBAAKK,UAAU,UAAS,8CACvB,uBAAGsB,KAAK,gDAAR,4B,GArFiBC,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,MAAK,SAAAoE,GACjCA,EAAaC,kB","file":"static/js/main.8b4779f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unnamed.94e1d840.jpg\";","import React, { Fragment, Component} from 'react';\nimport { Card, Icon, Image, Input, Button, Header, Container, Segment} from 'semantic-ui-react';\nimport axios from 'axios';\nimport logo from './unnamed.jpg';\nimport './style.css';\n\n\n  function searchingFor(term){\n    return function(x){\n      return x.name.toLowerCase().includes(term.toLowerCase()) || !term;\n    }\n  }\n\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n      this.state = {\n      characters: [],\n        term: '',\n        currentPage: 1,\n        charactersPerPage: 6\n    };\n\n      this.searchHandler = this.searchHandler.bind(this);\n      this.handleClick = this.handleClick.bind(this);\n    \n  }\n\n  componentDidMount() {\n    axios.get(`https://breakingbadapi.com/api/characters`)\n      .then(res => {\n        const characters = res.data;\n        this.setState({ characters });\n      })\n\n\n  }\n\n  handleClick(event){\n    this.setState({currentPage: Number(event.target.id)});\n  }\n\n  searchHandler(event){\n    this.setState({\n      term: event.target.value,\n      currentPage: 1\n    })\n  }\n\n  render(){\n    const {term, characters, currentPage, charactersPerPage} = this.state;\n    var result = characters.filter(searchingFor(this.state.term));\n    var indexOfLastCharacters = currentPage * charactersPerPage;\n    var indexOfFirstCharacters = indexOfLastCharacters - charactersPerPage;\n    var currentPageCharacters = result.slice(indexOfFirstCharacters, indexOfLastCharacters);\n\n    var pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(result.length / charactersPerPage); i++){\n      pageNumbers.push(i);\n    }\n\n    var renderPagerNumbers = pageNumbers.map(number => {\n      return(\n        <Button id={number} onClick={this.handleClick}>{number}</Button>\n      );\n\n    });\n    \n\n    return(\n      <div className=\"container\">\n        <Header className=\"header-top\"><img src={logo} id=\"logo\"/></Header>\n        <Container>\n        <form>\n          <Input icon='search' placeholder=\"Pesquisar\" type=\"text\" onChange={this.searchHandler} value={term}/>\n        </form>\n        {currentPageCharacters.map(characters => {\n          return(\n             //<div class=\"ui card\">\n               <Card id=\"card\">\n                      <Image src={characters.img} wrapped ui={false}/>\n                      <Card.Content>\n                        <Card.Header>{characters.name}</Card.Header>\n                        <Card.Meta>\n                          <span><Icon name='birthday'/> {characters.birthday} | <Icon name=\"user\"/>{characters.nickname}</span>\n                        </Card.Meta>\n                        <Card.Description>\n                          {characters.occupation}\n                        </Card.Description>\n                      </Card.Content>\n                    </Card>\n              //</div>\n          )\n        }\n        )}\n</Container>\n<div className=\"pages\">{renderPagerNumbers}</div>\n<div className=\"footer\"><p>Desenvolvido por \n\t<a href=\"https://www.linkedin.com/in/carolinachaves1/\"> Carolina Chaves </a></p></div>\n      </div>    \n      )\n  }\n  \n}\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}